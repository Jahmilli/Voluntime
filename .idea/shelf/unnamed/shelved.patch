Index: app/src/main/java/team7/voluntime/Activities/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package team7.voluntime.Activities;\n\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.res.Configuration;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.Snackbar;\nimport android.support.design.widget.TextInputLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.util.Patterns;\nimport android.view.View;\nimport android.view.inputmethod.InputMethodManager;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.google.android.gms.auth.api.signin.GoogleSignIn;\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount;\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient;\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions;\nimport com.google.android.gms.common.api.ApiException;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.auth.AuthCredential;\nimport com.google.firebase.auth.AuthResult;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.auth.GoogleAuthProvider;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport butterknife.OnClick;\nimport team7.voluntime.R;\n\npublic class LoginActivity extends AppCompatActivity {\n    private FirebaseAuth mAuth;\n    private ProgressDialog progressDialog;\n    private GoogleSignInClient mGoogleSignInClient;\n    private FirebaseAuth.AuthStateListener mAuthStateListener;\n    private static final int RC_SIGN_IN = 1;\n    private FirebaseUser user;\n    private FirebaseDatabase database;\n    private DatabaseReference reference;\n\n    /**\n     * Use the @BindView annotation so Butter Knife can search for that view, and cast it for you\n     * (in this case it will get casted to Edit Text)\n     */\n    @BindView(R.id.logoMain)\n    ImageView logoMain;\n\n    @BindView(R.id.loginEmailET)\n    EditText loginEmailET;\n\n    @BindView(R.id.emailInputLayout)\n    TextInputLayout emailInputLayout;\n\n    @BindView(R.id.passwordInputLayout)\n    TextInputLayout passwordInputLayout;\n\n    @BindView(R.id.loginPasswordET)\n    EditText loginPasswordET;\n\n    @BindView(R.id.resetPasswordTV)\n    TextView resetPasswordTV;\n\n    /**\n     * It is helpful to create a tag for every activity/fragment. It will be easier to understand\n     * log messages by having different tags on different places.\n     */\n    private static String TAG = \"LoginActivity\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n        // You need this line on your activity so Butter Knife knows what Activity-View we are referencing\n        ButterKnife.bind(this);\n        mAuth = FirebaseAuth.getInstance();\n\n        database = FirebaseDatabase.getInstance();\n        try {\n            database.setPersistenceEnabled(true);\n        } catch (Exception e){\n            // TODO: Handle any Exception thrown by database.setPersistenceEnabled\n        }\n\n        mAuthStateListener = new FirebaseAuth.AuthStateListener() {\n            @Override\n            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {\n                if (firebaseAuth.getCurrentUser() != null && isUserVerified()) {\n                    if (!LoginActivity.this.isFinishing()) {\n                        Log.d(TAG, \"Logging in \" + firebaseAuth.getCurrentUser().getEmail());\n                        progressDialog.setMessage(getString(R.string.login_progress_dialog));\n                        progressDialog.show();\n                    }\n                    mAuth.removeAuthStateListener(mAuthStateListener);\n                    setupCompletedCheck();\n                }\n            }\n        };\n\n        // Configure sign-in to request the user's ID, email address, and basic\n        // profile. ID and basic profile are included in DEFAULT_SIGN_IN.\n        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n                .requestIdToken(getString(R.string.default_web_client_id))\n                .requestEmail() // TODO: Verify this is needed\n                .build();\n\n        // Build a GoogleSignInClient with the options specified by gso.\n        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);\n\n        emailInputLayout.setHintEnabled(false);\n        passwordInputLayout.setHintEnabled(false);\n        setTitle(R.string.log_in_txt);\n        progressDialog = new ProgressDialog(this);\n        progressDialog.setCancelable(false);\n\n        String logoName = \"heart.png\";\n        try {\n            InputStream stream = getAssets().open(logoName);\n            Drawable d = Drawable.createFromStream(stream, null);\n            logoMain.setImageDrawable(d);\n        } catch (IOException e) {\n            e.printStackTrace();\n            Log.d(TAG, e.toString());\n        }\n    }\n\n    // Using this so the activity isn't recreated on orientation change\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        mAuth.addAuthStateListener(mAuthStateListener);\n        // Check for existing Google Sign In account, if the user is already signed in\n        // the GoogleSignInAccount will be non-null.\n\n        // TODO: Figure out what to do with this\n        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(this);\n//        updateUI(account);\n    }\n\n    // Navigation method to 'CreateAccountActivity'\n    @OnClick(R.id.createAccountTV)\n    public void navToCreateAccount() {\n        startActivity(new Intent(this, CreateAccountActivity.class));\n    }\n\n    // Navigation method to 'ForgotPasswordFragment'\n    @OnClick(R.id.resetPasswordTV)\n    public void navToForgotPassword() {\n        startActivity(new Intent(this, ForgotPasswordActivity.class));\n    }\n\n    private boolean isValidEmail(CharSequence target) {\n        return (!TextUtils.isEmpty(target) && Patterns.EMAIL_ADDRESS.matcher(target).matches());\n    }\n\n    private boolean isUserVerified() {\n        if(mAuth.getCurrentUser() != null) {\n            final String email = mAuth.getCurrentUser().getEmail();\n            if(mAuth.getCurrentUser().isEmailVerified()) {\n                Log.d(TAG,email + \" has been verified\");\n                mAuth.getCurrentUser().reload();\n                return true;\n            } else {\n                Log.d(TAG,email + \" has not been verified\");\n                Snackbar.make(findViewById(R.id.login_layout),\n                        email + getString(R.string.user_not_verified_message), 5000)\n                        .setAction(\"Resend\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                                Log.d(TAG, \"Send verification button clicked\");\n                                sendVerificationEmail();\n                            }\n                        }).show();\n                return false;\n            }\n        }\n        return false;\n    }\n\n    // Sends a verification email to logged in user\n    private void sendVerificationEmail() {\n        mAuth.getCurrentUser()\n                .sendEmailVerification()\n                .addOnCompleteListener(new OnCompleteListener<Void>() {\n                    @Override\n                    public void onComplete(@NonNull Task<Void> task) {\n                        if (task.isSuccessful()) {\n                            Log.d(TAG, \"Authentication email sent successfully \" + task.getResult());\n                            Toast.makeText(LoginActivity.this, R.string.email_authentication_message_success, Toast.LENGTH_LONG).show();\n                        } else {\n                            Log.d(TAG, \"Authentication email failed to send \" + task.getException());\n                            Toast.makeText(LoginActivity.this, R.string.email_authentication_message_failure, Toast.LENGTH_SHORT).show();\n                        }\n                    }\n                });\n    }\n\n    // Hides the keyboard if a text field is focused\n    private void hideKeyboard() {\n        View view = this.getCurrentFocus();\n        if (view != null) {\n            InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n        }\n    }\n\n    // Authenticates the user's email and password with Firebase\n    @OnClick(R.id.loginBtn)\n    public void logIn() {\n        String email = loginEmailET.getText().toString();\n        String password = loginPasswordET.getText().toString();\n        hideKeyboard();\n\n        if (!isValidEmail(email)) {\n            Toast.makeText(this, getString(R.string.email_check_toast), Toast.LENGTH_SHORT).show();\n            return;\n        }\n        if (TextUtils.isEmpty(password)) {\n            Toast.makeText(this, getString(R.string.password_check_toast), Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        progressDialog.setMessage(getString(R.string.login_progress_dialog));\n        progressDialog.show();\n\n        mAuth.signInWithEmailAndPassword(email, password)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        progressDialog.dismiss();\n                        if (task.isSuccessful()) {\n                            Log.d(TAG, \"signInWithEmail: sucess\");\n                            if (isUserVerified()) {\n                                mAuth.removeAuthStateListener(mAuthStateListener);\n                                setupCompletedCheck();\n                            }\n                        } else {\n                            Log.d(TAG, \"signInWithEmail: failure\", task.getException());\n                            String invalidUser = \"com.google.firebase.auth.FirebaseAuthInvalidUserException\";\n                            String invalidCredentials = \"com.google.firebase.auth.FirebaseAuthInvalidCredentialsException\";\n                            String exceptionString = task.getException().toString();\n\n                            // TODO: Clean this up to compare against actual exception, not the strings with the exceptions above...\n                            if(exceptionString.startsWith(invalidUser) || exceptionString.startsWith(invalidCredentials)) {\n                                Toast.makeText(LoginActivity.this, R.string.invalid_email_and_password,\n                                        Toast.LENGTH_SHORT).show();\n                            } else {\n                                Toast.makeText(LoginActivity.this, R.string.exception_during_login,\n                                        Toast.LENGTH_SHORT).show();\n                            }\n                        }\n                    }\n                });\n        Log.d(TAG, \"username: \" + email + \" password: \" + password);\n    }\n\n    // The initial method called when clicking 'sign in with google' and verifies the google account\n    @OnClick(R.id.googleBtn)\n    public void signInWithGoogle() {\n        progressDialog.setMessage(getString(R.string.login_progress_dialog));\n        progressDialog.show();\n        Intent signInIntent = mGoogleSignInClient.getSignInIntent();\n        startActivityForResult(signInIntent, RC_SIGN_IN);\n    }\n\n\n    // Makes a call to firebase to sign in with the google account passed in\n    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {\n        Log.d(TAG, \"firebaseAuthWithGoogle:\" + acct.getId());\n\n        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);\n        mAuth.signInWithCredential(credential)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        progressDialog.dismiss();\n                        if (task.isSuccessful()) {\n                            // Sign in success, update UI with the signed-in user's information\n                            Log.d(TAG, \"signInWithCredential:success\");\n                        } else {\n                            // If sign in fails, display a message to the user.\n                            Log.w(TAG, \"signInWithCredential:failure\", task.getException());\n                            Snackbar.make(findViewById(R.id.login_layout), \"Authentication Failed.\", Snackbar.LENGTH_SHORT).show();\n                        }\n                    }\n                });\n    }\n\n    public void setupCompletedCheck() {\n        user = FirebaseAuth.getInstance().getCurrentUser();\n        reference = database.getReference(\"Users\").child(user.getUid());\n        reference.keepSynced(true);\n\n        reference.child(\"SetupComplete\").addListenerForSingleValueEvent(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\n                try {\n                    if (dataSnapshot.getValue() != null && (boolean) dataSnapshot.getValue()) {\n                        Log.d(TAG, \"LOGGING IN: In the correct statement\");\n                        startMain();\n                    } else {\n                        Log.d(TAG, \"LOGGING IN: In the wrong statement\");\n                        startSetup();\n                    }\n                } catch (Exception e) {\n                    // TODO: Handle Exception and maybe catch more specific Exceptions\n//                    startSetup();\n                    Log.d(TAG, \"LOGGING IN: An exception occurred during setupCompleteCheck\");\n                    Log.d(TAG, e.toString());\n                }\n                progressDialog.dismiss();\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError databaseError) {\n                // TODO: Handle database error here\n            }\n        });\n    }\n\n    public void startMain() {\n        reference.child(\"AccountType\").addListenerForSingleValueEvent(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\n                Log.d(TAG, \"START MAIN: \" + dataSnapshot.getValue() );\n                if (dataSnapshot.getValue() == null) {\n                    startSetup();\n                } else {\n                    startActivity(new Intent(LoginActivity.this, MainActivity.class)\n                            .putExtra(\"AccountType\", dataSnapshot.getValue().toString()));\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError databaseError) {\n                // TODO: Handle databaseError here\n            }\n        });\n    }\n\n    public void startSetup() {\n        startActivity(new Intent(LoginActivity.this, SetupActivity.class));\n    }\n\n    @Override\n    public void onBackPressed() {\n        super.onBackPressed();\n        this.finishAffinity();\n    }\n\n    // This listens to any requests made in the activity and deals with them appropriately\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        // If request code matches to Google Sign in will try and authenticate with Firebase\n        if (requestCode == RC_SIGN_IN) {\n            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);\n            try {\n                GoogleSignInAccount account = task.getResult(ApiException.class);\n                firebaseAuthWithGoogle(account);\n            } catch (ApiException e) {\n                Log.d(TAG, \"Google sign in failed\", e);\n                Toast.makeText(this, getString(R.string.google_authentication_message_failure), Toast.LENGTH_SHORT).show();\n                progressDialog.dismiss();\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/team7/voluntime/Activities/LoginActivity.java	(revision 4769ee4cca51a632b42045a2f24e87584f3125cb)
+++ app/src/main/java/team7/voluntime/Activities/LoginActivity.java	(date 1554108375368)
@@ -155,7 +155,7 @@
         // the GoogleSignInAccount will be non-null.
 
         // TODO: Figure out what to do with this
-        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(this);
+        // GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(this);
 //        updateUI(account);
     }
 
@@ -254,7 +254,7 @@
                             Log.d(TAG, "signInWithEmail: sucess");
                             if (isUserVerified()) {
                                 mAuth.removeAuthStateListener(mAuthStateListener);
-                                setupCompletedCheck();
+                                setupCompletedCheck(false);
                             }
                         } else {
                             Log.d(TAG, "signInWithEmail: failure", task.getException());
@@ -308,29 +308,41 @@
                 });
     }
 
-    public void setupCompletedCheck() {
-        user = FirebaseAuth.getInstance().getCurrentUser();
-        reference = database.getReference("Users").child(user.getUid());
-        reference.keepSynced(true);
+    public void setupCompletedCheck(boolean checked) {
+        reference = database.getReference("Users").child(user.getUid());
+        if (!checked) {
+            user = FirebaseAuth.getInstance().getCurrentUser();
+            checkAccountExists(database.getReference("Volunteers").child(user.getUid()), false);
+        } else {
+            checkAccountExists(database.getReference("Charities").child(user.getUid()), true);
+        }
 
-        reference.child("SetupComplete").addListenerForSingleValueEvent(new ValueEventListener() {
+    }
+
+    public void checkAccountExists(final DatabaseReference ref, final boolean hasRun) {
+        boolean userExists = false;
+        ref.child("SetupComplete").addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                 try {
                     if (dataSnapshot.getValue() != null && (boolean) dataSnapshot.getValue()) {
-                        Log.d(TAG, "LOGGING IN: In the correct statement");
+                        reference = ref;
+                        reference.keepSynced(true);
+                        progressDialog.dismiss();
                         startMain();
                     } else {
-                        Log.d(TAG, "LOGGING IN: In the wrong statement");
-                        startSetup();
+                        if (hasRun) {
+                            progressDialog.dismiss();
+                            startSetup();
+                        } else {
+                            setupCompletedCheck(true);
+                        }
                     }
                 } catch (Exception e) {
                     // TODO: Handle Exception and maybe catch more specific Exceptions
-//                    startSetup();
                     Log.d(TAG, "LOGGING IN: An exception occurred during setupCompleteCheck");
                     Log.d(TAG, e.toString());
                 }
-                progressDialog.dismiss();
             }
 
             @Override
@@ -344,7 +356,6 @@
         reference.child("AccountType").addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
-                Log.d(TAG, "START MAIN: " + dataSnapshot.getValue() );
                 if (dataSnapshot.getValue() == null) {
                     startSetup();
                 } else {
